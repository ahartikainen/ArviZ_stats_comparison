name: Linux

on: [push]

jobs:
  tests:
    name: tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
        r-version: [3.6.3]
        use-git : [true, false]
      fail-fast: false
    steps:
      - name: Checkout github
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up R ${{ matrix.r-version }}
        uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.r-version }}

      - name: Install python dependencies (pip)
        run: |
          pip install --upgrade pip
          pip install arviz pystan
        if: "!matrix.use-git"

      - name: Install python dependencies (git)
        run: |
          pip install --upgrade pip
          pip install git+git://github.com/stan-dev/pystan.git
          pip install git+git://github.com/arviz-devs/arviz.git
        if: matrix.use-git

      - name: Set up toolchain for R
        run: |
          sudo apt-get update
          sudo apt-get install libcurl4-openssl-dev libv8-dev
          mkdir -p "${HOME}/.R"
          printf "\nCXX14FLAGS=-O3 -march=native -mtune=native -fPIC" >> "${HOME}/.R/Makevars"
          printf "\nCXX14=g++" >> "${HOME}/.R/Makevars"
          cat --show-all "${HOME}/.R/Makevars"
          Rscript -e 'install.packages("remotes")'
          Rscript -e 'install.packages("jsonlite")'

      - name: Install R dependencies (cran)
        run: |
          Rscript -e 'install.packages("rstan", type = "source")'
        if: "!matrix.use-git"

      - name: Install R dependencies StanHeaders (git)
        run: |
          Rscript -e 'install.packages("Rcpp")'
          Rscript -e 'install.packages("RcppEigen")'
          Rscript -e 'install.packages("http://cran.r-project.org/src/contrib/Archive/StanHeaders/StanHeaders_2.21.0-1.tar.gz", repos=NULL, type="source")'
        if: matrix.use-git

      - name: Install R dependencies RStan (git)
        run: |
          Rscript -e 'remotes::install_github("stan-dev/rstan", ref = "develop", subdir = "rstan/rstan", build_opts = "--no-build-vignettes")'
        if: matrix.use-git

      - name: RStan, PyStan and ArviZ versions
        run: |
          python -c 'import arviz;print("ArviZ version: {}".format(arviz.__version__))'
          python -c 'import pystan;print("PyStan version: {}".format(pystan.__version__))'
          Rscript -e 'library(rstan);print(paste("RStan version:", packageVersion("rstan"), sep = " "))'

      - name: Inject logger
        run: |
          python -c "import pystan;print(pystan)"
          Rscript -e "print(.libPaths())"

          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/util/initialize.hpp" 2>/dev/null | xargs sed -i 's/#include <string>/#include <string>\n#include <iostream>\n/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/util/initialize.hpp" 2>/dev/null | xargs sed -i 's/unconstrained = random_context.get_unconstrained();/unconstrained = random_context.get_unconstrained(); std::stringstream umsg; umsg << "unconstrained "; for (int i=0; i < unconstrained.size(); i++) {umsg << unconstrained[i] << " ";} std::cout << umsg.str();\n/ w /dev/stdout'

          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/sample/hmc_nuts_diag_e_adapt.hpp" 2>/dev/null | xargs sed -i 's/#include <vector>/#include <vector>\n#include <iostream>\n#include <string>\n/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/sample/hmc_nuts_diag_e.hpp" 2>/dev/null | xargs sed -i 's/#include <vector>/#include <vector>\n#include <iostream>\n#include <string>\n/ w /dev/stdout'

          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/sample/hmc_nuts_diag_e_adapt.hpp" 2>/dev/null | xargs sed -i 's/boost::ecuyer1988 rng = util::create_rng(random_seed, chain);/boost::ecuyer1988 rng = util::create_rng(random_seed, chain); std::stringstream rmsg; rmsg << "rng "; boost::random::uniform_real_distribution<double> unif(-2.0, 2.0); rmsg << unif(rng); std::cout << rmsg.str() << "\\\n";\n/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/sample/hmc_nuts_diag_e.hpp" 2>/dev/null | xargs sed -i 's/boost::ecuyer1988 rng = util::create_rng(random_seed, chain);/boost::ecuyer1988 rng = util::create_rng(random_seed, chain); std::stringstream rmsg; rmsg << "rng "; boost::random::uniform_real_distribution<double> unif(-2.0, 2.0); rmsg << unif(rng); std::cout << rmsg.str() << "\\\n";\n/ w /dev/stdout'

          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/sample/hmc_nuts_diag_e_adapt.hpp" 2>/dev/null | xargs sed -i 's/sampler.get_stepsize_adaptation().set_t0(t0);/sampler.get_stepsize_adaptation().set_t0(t0); std::stringstream rmsg2; rmsg2 << "rng "; rmsg2 << unif(rng); std::cout << rmsg2.str() << "\\\n";\n/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/sample/hmc_nuts_diag_e.hpp" 2>/dev/null | xargs sed -i 's/sampler.get_stepsize_adaptation().set_t0(t0);/sampler.get_stepsize_adaptation().set_t0(t0); std::stringstream rmsg2; rmsg2 << "rng "; rmsg2 << unif(rng); std::cout << rmsg2.str() << "\\\n";\n/ w /dev/stdout'

          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/sample/hmc_nuts_diag_e_adapt.hpp" 2>/dev/null | xargs sed -i 's/sampler.set_max_depth(max_depth);/sampler.set_max_depth(max_depth); std::stringstream umsg; umsg << " stepsize " << stepsize; umsg << " stepsize_jitter " << stepsize_jitter; umsg << " max_depth " << max_depth; umsg << " delta " << delta; umsg << " gamma " << gamma; umsg << " kappa " << kappa; umsg << " t0 " << t0; std::cout << umsg.str()  << "\\\n";\n/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/sample/hmc_nuts_diag_e.hpp" 2>/dev/null | xargs sed -i 's/sampler.set_max_depth(max_depth);/sampler.set_max_depth(max_depth); std::stringstream umsg; umsg << " stepsize " << stepsize; umsg << " stepsize_jitter " << stepsize_jitter; umsg << " max_depth " << max_depth; std::cout << umsg.str() << "\\\n";\n/ w /dev/stdout'

          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/util/run_adaptive_sampler.hpp" 2>/dev/null | xargs sed -i 's/#include <vector>/#include <vector>\n#include <iostream>\n#include <string>\n/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/util/run_sampler.hpp" 2>/dev/null | xargs sed -i 's/#include <vector>/#include <vector>\n#include <iostream>\n#include <string>\n/ w /dev/stdout'

          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/util/run_adaptive_sampler.hpp" 2>/dev/null | xargs sed -i 's/clock_t start = clock();/clock_t start = clock(); std::stringstream rmsg; rmsg << "rng_start "; boost::random::uniform_real_distribution<double> unif(-2.0, 2.0); rmsg << unif(rng); std::cout << rmsg.str() << "\\\n";\n/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*services/util/run_sampler.hpp" 2>/dev/null | xargs sed -i 's/clock_t start = clock();/clock_t start = clock(); std::stringstream rmsg; rmsg << "rng_start "; boost::random::uniform_real_distribution<double> unif(-2.0, 2.0); rmsg << unif(rng); std::cout << rmsg.str() << "\\\n";\n/ w /dev/stdout'

          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*stan/mcmc/hmc/base_hmc.hpp" 2>/dev/null | xargs sed -i 's/#include <string>/#include <string>\n#include <iostream>/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*stan/mcmc/hmc/base_hmc.hpp" 2>/dev/null | xargs sed -i 's/int direction = delta_H > std::log(0.8) ? 1 : -1;/int direction = delta_H > std::log(0.8) ? 1 : -1;\nstd::stringstream mymsg; mymsg << "not while H0 " << H0 << " h " << h << " delta_H " << delta_H << " direction " << direction << "\\\n"; std::cout << mymsg.str()  << "\\\n"; std::stringstream mymsg2;\n/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*stan/mcmc/hmc/base_hmc.hpp" 2>/dev/null | xargs sed -i 's/\n          double delta_H = H0 - h;/\n          double delta_H = H0 - h;\n  mymsg2 << "while H0 " << H0 << " h " << h << " delta_H " << delta_H << "\\\n";\n/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*stan/mcmc/hmc/base_hmc.hpp" 2>/dev/null | xargs sed -i 's/\n        this->z_.ps_point::operator=(z_init);/\n        this->z_.ps_point::operator=(z_init);\n  std::cout << mymsg2.str() << "\\\n";\n/ w /dev/stdout'

          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*stan/mcmc/stepsize_adaptation.hpp" 2>/dev/null | xargs sed -i 's/#include <cmath>/#include <cmath>\n#include <string>\n#include <iostream>\n/ w /dev/stdout'
          find /opt/hostedtoolcache/Python /home/runner/work/_temp/Library /opt/R/3.6.3/lib/R/library -type f -wholename "*stan/mcmc/stepsize_adaptation.hpp" 2>/dev/null | xargs sed -i 's/x_bar_ = (1.0 - x_eta) * x_bar_ + x_eta * x;/x_bar_ = (1.0 - x_eta) * x_bar_ + x_eta * x;\nstd::cout << "LEARN STEPSIZE adapt_stat " << adapt_stat << " eta " << eta << " s_bar_ " << s_bar_ << " x " << x << " exp(x) " << epsilon << " x_eta " << x_eta << "\\\n";\n/ w /dev/stdout'

      - name: Comparison RStan 8 schools
        run: |
          Rscript comparison_stats_rstan.R

      - name: Comparison ArviZ 8 schools
        run: |
          python comparison_stats_arviz.py

      - name: RStan seed test
        run: |
          Rscript run_rstan.R

      - name: PyStan seed test
        run: |
          python run_pystan.py
